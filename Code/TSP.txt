% Optimizing Travelling Salesperson problem using genetic algorithm approach.
 
prompt = "Enter the size of the population: "; %Taking the number of instances to be created.
population = input(prompt);
prompt = "Enter the number of cities: "; %Taking the number of cities in the problem.
length = input(prompt);
prompt = "Enter the crossover probability[0-1]: "; %Taking the crossover probability.
crossP = input(prompt); 
prompt = "Enter the mutation probability[0-1]: ";
mutP = input(prompt); %Taking the mutation probability.
tempPop = zeros((2*population),length);
fitarr = zeros(2*population,1); %Initialize fitness array.
convarr=[];
count=0;
flag=1;
 
% Initializing the current population.

currentpop = zeros(population,length);
for i=1:population
    currentpop(i,:) = randperm(length,length);
end
fprintf("The Current Population is: \n");
disp(currentpop);
 
 
%Initializing the adjacency matrix of the graph.

distmat=[]; %Inputs are taken here i.e. city distances.
% for i=1:length
%     for j=1:length
%         if i==j
%            distmat(i,j)=0;
%         end
%         if i<j
%            k=randi(10);
%            distmat(i,j)= k*i+j;
%         end
%         if i>j
%            distmat(i,j)=distmat(j,i);
%         end
%      end
% end
fprintf("The Adjacency matrix of the graph:\n");
disp(distmat);
    


%Creating the matingPool.

matingPool = zeros(population,length);
while(flag~=0)
    for j=1:population
            parent1=0; 
            parent2=0;
            while(parent1==parent2)
                parent1 = randi(population);
                parent2 = randi(population);
            end
            p1chromosome = currentpop(parent1,:);
            p2chromosome = currentpop(parent2,:);
            p1fitval = fitnessValue(p1chromosome,length,distmat);
            p2fitval = fitnessValue(p2chromosome,length,distmat);
            if p1fitval < p2fitval
                 matingPool(j,:) = currentpop(parent2,:);
            else
                 matingPool(j,:) = currentpop(parent1,:);
            end
    end
%fprintf("The mating pool:\n"); 
%disp(matingPool);
   
%Performing crossover operation.

 for i = 1:population
    prob = unifrnd(0,1);
    if prob <= crossP
        parent1=0; 
        parent2=0;
        while(parent1==parent2)
            parent1 = randi(population);
            parent2 = randi(population);
        end
        p1chromosome = matingPool(parent1,:);
        p2chromosome = matingPool(parent2,:);
        crossoverPoint = randi([2,length-1]);
        offspring1 = [p1chromosome(1:crossoverPoint),p2chromosome(crossoverPoint+1:length)];
        offspring2 = [p2chromosome(1:crossoverPoint),p1chromosome(crossoverPoint+1:length)];
        offspring1 = unique(offspring1,'stable');
        offspring2 = unique(offspring2,'stable');
        temp = setdiff(p2chromosome,offspring1);
        offspring1 = [offspring1,temp];
        temp = setdiff(p1chromosome,offspring2);
        offspring2 = [offspring2,temp];
        matingPool(parent1,:) = offspring1;
        matingPool(parent2,:) = offspring2;
    end
 end
% fprintf("The new matingpool after crossover:\n");
% disp(matingPool);
 

% Performing the mutation operation.

for k=1:population
        prob = unifrnd(0,1);
        if prob <= mutP
            parent1 = randi(population);
            p1chromosome = matingPool(parent1,:);
            crossPoint = round(unifrnd(1,(length-1)));
            child1 = [flip(p1chromosome(1:crossPoint)),p1chromosome(crossPoint+1:end)];
            matingPool(parent1,:) = child1;
        end
end
% fprintf("The new matingpool after mutation:\n");
% disp(matingPool);
 
%Creating a temporary population with current population and matingPool.

tempPool = currentpop;
j=1;
for i = (population+1):(2*population)
    tempPool(i,:) = matingPool(j,:);
    j=j+1;
end
% fprintf("The new matingpool after combine:\n");
% disp(tempPool);
 
% Computing the fitness value.

for i=1:(2*population)
    fitarr(i,:)=fitnessValue(tempPool(i,:),length,distmat);
end
 
% fprintf("The fitness function of the population: \n");
% disp(fitarr);
fprintf("The minimum distance is: ");
disp(min(fitarr));
count=count+1; 
convarr = [convarr,min(fitarr)];
% convarr
 
%Converging the solution.

if count>100
    for i=count:-1:(count-100)
         if min(fitarr)==convarr(i)
             flag=0;
         else
            flag=1;
         end
     end
     if flag == 0
         break;
     end
end
 

for i=1:(population)
    [M,I] = min(fitarr);
    currentpop(i,:)=tempPool(I,:);
    fitarr(I)=100000;
end
% for i=(population/2+1):population
%     [M,I] = max(fitarr);
%     currentpop(i,:)=tempPool(I,:);
%     fitarr(I)=0;
% end
 
end
fprintf("The optimal solution is:\n");
disp(tempPool(I,:));
fprintf("No of generations taken: \n");
disp(count);

%fitness calculation function.

function [fitval]=fitnessValue(array,length,distmat)
    fitval=0;
    for i=1:length-1
        fitval=fitval+distmat(array(i),array(i+1));
    end
    fitval=fitval+distmat(array(length),array(1));
end
